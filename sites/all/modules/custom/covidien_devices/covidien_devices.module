<?php
/**
 * @file
 * This file used to customize the drupal node form based on the covidien UI.
 * Implement hook_menu()
 */
function covidien_devices_menu() {
  $items = array(); 
  // URL to access Log detail
  $items['covidien/logdetails'] = array(
  		'title' => '',
  		'description' => t('Call log web service to fetch log detail information.'),
  		'page callback' => 'covidien_log_details',
		'access callback' => true,
		'type' => MENU_CALLBACK,
  );
  
  // URL to access User Menu
  $items['covidien/userinfo/%'] = array(
  'title' => '',
  'description' => t('Control the new user interface for uploading and managing file attachments.'),
  'page callback' => 'get_user_details',
  'page arguments' => array(2),
  'access arguments' => array('access content'),
  'type' => MENU_NORMAL_ITEM,
  );
  // URL to access User Menu
  $items['covidien/device/%'] = array(
  'title' => '',
  'description' => t('Contains device info.'),
  'page callback' => 'get_device_details',
  'page arguments' => array(2),
  'access arguments' => array('access content'),
  'type' => MENU_NORMAL_ITEM,
  );
  $items['covidien/devices/autocomplete'] = array(
  'title' => '',
  'page callback' => 'covidien_devices_autocomplete',
  'page arguments' => array(3, 4),
  'access callback' => 'covidien_devices_check_access',
  'type' => MENU_CALLBACK,
  );
  $items['covidien/upgrade/history/%/%/%'] = array(
  'title' => '',
  'page callback' => 'device_upgrade_history',
  'page arguments' => array(3, 4, 5),
  'access callback' => 'covidien_devices_check_access',
  'type' => MENU_CALLBACK,
  );
  $items['covidien/log/history/%/%/%'] = array(
  'title' => '',
  'page callback' => 'device_log_history',
  'page arguments' => array(3, 4, 5),
  'access callback' => 'covidien_devices_check_access',
  'file' => 'log_retrieval.inc',
  'type' => MENU_CALLBACK,
  );
  // URL to access autocomplete function for Company account number in add user, edit user pages
  $items['covidien/admin/device/account/filter'] = array(
  'title' => t('Ajax'),
  'description' => t('Ajax'),
  'page callback' => 'get_CustomerAccountDevice',
  'page arguments' => array(5, 6),
  'access arguments' => array('access content'),
  'type' => MENU_CALLBACK,
  ); 
  // URL to access autocomplete function for Company account number in add user, edit user pages
  $items['covidien/admin/device/customername/filter'] = array(
  'title' => t('Ajax'),
  'description' => t('Ajax'),
  'page callback' => 'get_CustomerNameDevice',
  'page arguments' => array(5, 6),
  'access arguments' => array('access content'),
  'type' => MENU_CALLBACK,
  );
  // URL to access autocomplete function for Company account number in add user, edit user pages
  $items['covidien/admin/device/customername/getname'] = array(
  'title' => t('Ajax'),
  'description' => t('Ajax'),
  'page callback' => 'get_CustomerNamefromAccountfordevice',
  'access arguments' => array('access content'),
  'type' => MENU_CALLBACK,
  );
  return $items;
}

function covidien_devices_init() {
  module_load_include('inc', 'covidien_devices', 'covidien_devices_query');
  module_load_include('inc', 'covidien_devices', 'log_retrieval');
}
/**
 * Implement hook_check_access(), to block unauthorized users.
 */
function covidien_devices_check_access() {
  global $user;
  if ($user->uid) {
    return TRUE;
  }
}
/**
 * Autosugesstion for device serial number related to with device types
 * @parm
 * arg1: devicetype
 * arg7: search string
 */
function covidien_devices_autocomplete($arg1, $arg2) {
  global $user;
  $where = "";
  $customer_query = "";
  $items = array();
  if (strlen($arg2)>2) {
    $arg2 = trim($arg2);
    
    $string = str_replace("_", "\_", $arg2);
    $result = autoSuggestionDeviceQuery($string, $arg1, $user->devices_nid, $user->name, $user->uid);

    while ($row = db_fetch_object($result)) {
      $val = $row->field_device_serial_number_value;
      $items[$val] = $val;
    }
  }
  print drupal_to_js($items);
  exit();
}
/**
 * Theme variables.
 */
function get_user_details($args) {
  $node = node_load($args);
  $output = theme('user_info', $node);
  return $output;
}
/**
 * Theme variables.
 */
function get_device_details($args) {
  $output = theme('device_info', $args);
  return $output;
}

/**
 * Theme variables.
 */
function covidien_devices_theme() {
  return array(
    'user_info' => array(
    'template' => 'userinfo',
    'arguments' => array($node = NULL),
    ),
    'device_info' => array(
    'template' => 'deviceinfo',
    'arguments' => array($args = NULL),
    ),
    'upgrade_history' => array(
    'template' => 'upgrade-history',
    'arguments' => array($installation_nid = NULL, $from_component_nid = NULL, $service_id = NULL),
    ),
  	'log_list' => array(
  	'template' => 'loglist',
  	'arguments' => array($args = NULL),
  	),  	
  	'log_details' => array(
  	'template' => 'logdetails',
  	'arguments' => array($args = NULL),
  	),
  );
}

function covidien_log_details(){
	$output = theme('log_details');
	return $output;
}

/**
 * get the parameter from server uri
 */
function getParameter($index) {
	$uri=$_SERVER['REQUEST_URI'];
	$serverPaths=explode('?',$uri);
	$serverPath=$serverPaths[0];
	$params=explode('/',$serverPath);
	if ($index==-1) {
		$index = count($params)-1;
	}
	return $params[$index];
}



function covidien_theme_preprocess_log_details(&$variables){
	global $base_web_service_url;
	global $base_log_file_path;
	
	$type = $_GET['type'];
	$filepath = $_GET['filename'];
	if(!isset($type)){
		$deviceTypeNid = $_GET['deviceTypeNid'];
		$date = $_GET['date'];
		$type=db_result(db_query('SELECT field_device_log_type_value FROM {content_type_device_log} a,{content_type_device_service_history} b WHERE a.field_device_service_history_nid=b.nid'. 
			' and field_device_log_filename_value=\'%s\'', $filepath));		
	}
	
	$service_url=$base_web_service_url.urlencode($base_log_file_path.$type.'/'.$filepath);
	$curl = curl_init();
	curl_setopt($curl, CURLOPT_URL, $service_url);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
	$data = curl_exec($curl);
	curl_close($curl);
	
	$variables['data']=$data;
		
}

/**
 * Template preprocess of logviewer list.
 */
function covidien_theme_preprocess_log_list(&$variables){
	
	$sno = getParameter(-1);
	if(!isset($sno)){
		$sno=$_GET['sno'];		
	}
	$variables['sno']=$sno;
	
	$logType = $_GET['logType'];
	$variables['logType']=$logType;
	
	$page = $_GET['page'];	
	if(!isset($page)){
		$page=1;
	}
	$serviceDate = $_GET['serviceDate'];
	$variables['serviceDate']=$serviceDate;
	$variables['page']=$page;
	$pageSize=10;
	
	$sortField=$_GET['sortField'];
	if(!isset($sortField)){
		$sortField="field_service_datetime_value";
	}
	$variables['sortField']=$sortField;
	$sortType=$_GET['sortType'];
	if(!isset($sortType)){
		$sortType="desc";
	}
	$variables['sortType']=$sortType;
	$query='SELECT field_service_datetime_value AS date, field_device_log_type_value AS log_type, field_device_log_filename_value AS log_filename,'
	.' field_service_note_value AS service_description'.	
	' FROM content_type_device JOIN'.
	' content_field_device_pk ON content_field_device_pk.field_device_pk_nid=content_type_device.nid JOIN content_type_device_installation ON'.
	' content_type_device_installation.nid=content_field_device_pk.nid JOIN content_type_device_service_history ON '.
	'content_type_device_installation.nid=content_type_device_service_history.field_device_installation_pk_nid JOIN node AS node_service_type '.
	'ON node_service_type.nid=content_type_device_service_history.field_device_service_type_nid JOIN content_type_device_log ON '.
	'content_type_device_log.field_device_service_history_nid=content_type_device_service_history.nid JOIN content_field_device_type ON '.
	'content_field_device_type.nid=content_type_device.nid JOIN node node_device_type ON node_device_type.nid=content_field_device_type.field_device_type_nid '.			
	'WHERE node_service_type.title=\'Log Retrieval\' AND field_device_serial_number_value=\''.$sno.'\' ';
	
	$countQuery='select count(*) as total'.
			' FROM content_type_device JOIN'.
			' content_field_device_pk ON content_field_device_pk.field_device_pk_nid=content_type_device.nid JOIN content_type_device_installation ON'.
			' content_type_device_installation.nid=content_field_device_pk.nid JOIN content_type_device_service_history ON '.
			'content_type_device_installation.nid=content_type_device_service_history.field_device_installation_pk_nid JOIN node AS node_service_type '.
			'ON node_service_type.nid=content_type_device_service_history.field_device_service_type_nid JOIN content_type_device_log ON '.
			'content_type_device_log.field_device_service_history_nid=content_type_device_service_history.nid JOIN content_field_device_type ON '.
			'content_field_device_type.nid=content_type_device.nid JOIN node node_device_type ON node_device_type.nid=content_field_device_type.field_device_type_nid '.
			'WHERE node_service_type.title=\'Log Retrieval\' AND field_device_serial_number_value=\''.$sno.'\' ';
	
	if(isset($logType) && $logType!=""){	
		$query=$query."  AND field_device_log_type_value like '%".$logType."%' ";	
		$countQuery=$countQuery."  AND field_device_log_type_value like '%".$logType."%' ";	
	}
	if(isset($serviceDate) && $serviceDate!=""){		
		$query=$query."  AND field_service_datetime_value like '".$serviceDate."%' ";
		$countQuery=$countQuery."  AND field_service_datetime_value like '".$serviceDate."%' ";
	}
	
	$query=$query.' order by '.$sortField.' '.$sortType.' limit '.($page-1)*$pageSize.','.$pageSize;	
	
	$queryResult=db_query($query);
	$logList=array();
	while($row = db_fetch_object($queryResult)) {		
		array_push($logList,$row);
	}
	
	$total=0;
	$countQueryResult=db_query($countQuery);
	while($row = db_fetch_object($countQueryResult)) {
		$total=$row->total;
	}
		
	$variables['totalPage']=floor($total/10)+1;
	$variables['logList'] = $logList;
}

/**
 * Template preprocess of user information.
 */
function template_preprocess_user_info(&$variables) {
  $variables['name'] = $variables[0]->field_first_name[0]['value'] . " " . $variables[0]->field_last_name[0]['value'];
  $variables['email'] = $variables[0]->field_person_username[0]['value'];
  $variables['isemp'] = $variables[0]->field_covidien_employee[0]['value'];
  $business = node_load($variables[0]->field_business_unit[0]['nid']);
  $variables['business'] = $business->title;
  $variables['location'] = "";
  $query = getBuCustomerinfoQuery($variables[0]->field_company_name[0]['nid']);
  while ($row = db_fetch_object($query)) {
    $nid = $row->nid;
  }
  $fid = getFacilitynidQuery($nid);
  $facility = node_load(getFacilityinfoQuery($fid));
  $variables['facility'] = $facility->title;
  $department = node_load($variables[0]->field_department[0]['nid']);
  $variables['department'] = $department->title;
  $company = node_load($variables[0]->field_company_name[0]['nid']);
  $variables['company'] = $company->title;
}
/**
 * Template preprocess.
 */
function template_preprocess_device_info(&$variables) {
  drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/newjquery.min.js');
  drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/jquery.colorbox-min.js');
  drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/jquery-ui.min.js');
  drupal_add_css(drupal_get_path('module', 'covidien_users') . '/css/colorbox.css');
  drupal_add_css(drupal_get_path('module', 'covidien_devices') . '/css/tabs.css');
  $id = filter_xss($variables[0]);
  global $base_url;
  $config_title = getConfiginfoQuery($id);
  $variables['config_title'] = $config_title;
  // Load Device location from Device installation content type with Device serial number
  $device_location_id = getLocationnidQuery($id);
  $device_location = node_load($device_location_id);
  // Load Device Country from with location id in Postal Address content type
  $device_location_country = node_load($device_location->field_postal_code_country[0]['nid']);
  $device_country = getCountryinfoQuery($id);
  $location = array();
  if (!empty($device_location)) {
    $location[] = $device_location->field_postal_address_line1[0]['value'];
    $location[] = $device_location->field_postal_address_city[0]['value'];
    $location[] = $device_location->field_state_province[0]['value'];
    $location[] = $device_location->field_postal_code[0]['value'];
    $location[] = $device_location_country->title;
  }
  $variables['location'] = implode(",", $location);
  $variables['country'] = $device_country;
  $query = getDeviceownerinfoQuery($id);
  while ($row = db_fetch_object($query)) {
    $cid = node_load($row->field_device_owner_nid);
    $did = node_load($row->nid);
    $maintanance_date = $row->field_maintance_expiration_date_value;
  }
  if (!empty($maintanance_date)) {
    $variables['maintanance_date'] = date('m/d/Y', strtotime($maintanance_date));
  }
  else {
    $variables['maintanance_date'] = '';
  } 
  $variables['cus_name'] = $cid->title;
  $variables['device_name'] = $did->title;
  if (empty($variables['device_name'])) {
    drupal_goto($base_url . "/covidien/device");
  }
  $variables['sno'] = filter_xss($variables[0]);
  $row = "";
  $query = getRegionInfo($cid->nid);
  while ($row = db_fetch_object($query)) {
    $nid = $row->nid;
    $facility = $row->field_bu_customer_account_number_value;
  }
  $variables['facility'] = $facility;
  $table = getHWSWTable($id);
  $topic = $_GET['topic'];
  $variables['device_config'] = '';
  $variables['device_history'] = '';
  $variables['discrepancy'] = '';
  if ($topic == 'config') {
    $variables['device_config'] = $table;
  }
  elseif ($topic == 'discrepancy') {
    $variables['discrepancy'] = views_embed_view("device_discrepancy", "page_1", $id);
  }
  else {
    $variables['device_history'] = views_embed_view("device_history", "page_1", $id);   
  }
	$variables['messages'] = theme('status_messages');
	$variables['log_viewer_tab'] = theme('log_list');
}
/**
 * Set Default select text in form
 */
function getHWSWTable($var) {
  $flag = 0;
	$invalid_configuration = FALSE;
	$hw_array = array();
	$sw_array = array();
  global $pager_page_array, $pager_total;
  global $wordwraplength, $wordwrapchar;
  $device_component_nid = array();
  $sql = getAssociatedHardwaresQuery();
  $header = array(
    array('data' => t('Name')),
    array('data' => t('Revision')),
    array('data' => t('Description')),
    array('data' => t('Name')),
    array('data' => t('Version')),
    array('data' => t('Description')),
    array('data' => t('Update Available?'))
  );
  $result = pager_query($sql, 10, 0 , NULL, $var);
  $rows = array();
  $row = array();
  $total_hw = 0;
  while ($data = db_fetch_object($result)) {
    $total_hw++;
    $hw_id = $data->node_node_data_field_device_component_nid;
		$hw_array[] = $hw_id;
    $hw_name = $data->node_node_data_field_device_component_title;
    $hw_ver = $data->node_node_data_field_device_component_node_data_field_hw_version_field_hw_version_value;
    $hw_desc = $data->node_node_data_field_device_component_node_data_field_hw_version_field_hw_description_value;
    $innersql = getSWquery($var);
    $flag = 0;
    $temp_hw = "";
    $global_flag = 0;
    while ($inner = db_fetch_object($innersql)) {
      $sw_hw_id = $inner->node_node_data_field_hw_list_nid;
			$sw_array[] = $sw_hw_id;
      $sw_title = $inner->node_node_data_field_device_component_title;
      $sw_version = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_version_value;
      $sw_desc = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_description_value;
      $upgrade = $inner->node_node_data_field_update_to_component_node_data_field_sw_version_field_sw_version_value;
      if (($sw_hw_id == $hw_id)) {
        if ($temp_hw == $hw_id) {
          $row[1] = "";$row[2] = "";$row[3] = "";
        }
        else {
          $temp_hw = $hw_id;$row[1] = wordwrap($hw_name, $wordwraplength, $wordwrapchar, TRUE);$row[2] = wordwrap($hw_ver, $wordwraplength, $wordwrapchar, TRUE);
          $row[3] = wordwrap($hw_desc, $wordwraplength, $wordwrapchar, TRUE);
        }
        $row[4] = wordwrap($sw_title, $wordwraplength, $wordwrapchar, TRUE);
        $row[5] = wordwrap($sw_version, $wordwraplength, $wordwrapchar, TRUE);
        $row[6] = wordwrap($sw_desc, $wordwraplength, $wordwrapchar, TRUE);
        $row[7] = $upgrade;
        $rows[] = $row;
        $flag = 1;
        $global_flag = 1;
        $dump1[$sw_hw_id] = array('device_nid' => $inner->nid, 'sw_title' => $sw_title, 'version' => $sw_version, 'desc' => $sw_desc, 'upgrade' => $upgrade);
        $device_component_nid[] = $inner->nid;
      }
      else {
        $dump[$sw_hw_id] = array('device_nid' => $inner->nid, 'sw_title' => $sw_title, 'version' => $sw_version, 'desc' => $sw_desc, 'upgrade' => $upgrade);
      }
    }
    if ($flag == 0) {
      $row[1] = wordwrap($hw_name, $wordwraplength, $wordwrapchar, TRUE);
      $row[2] = wordwrap($hw_ver, $wordwraplength, $wordwrapchar, TRUE);;
      $row[3] = wordwrap($hw_desc, $wordwraplength, $wordwrapchar, TRUE);
      $row[4] = '';
      $row[5] = '';
      $row[6] = '';
      $row[7] = '';
      $rows[] = $row;
    }
  }
  if ($total_hw == 0) {
    $duplicate_sw = array();
      $innersql = getSWquery($var);
      while ($inner = db_fetch_object($innersql)) {
        $component_nid = $inner->node_node_data_field_device_component_nid;
        if (in_array($component_nid, $duplicate_sw)) {
          continue;
        }
        $duplicate_sw[] = $component_nid;
        $sw_hw_id = $inner->node_node_data_field_hw_list_nid;
        $sw_title = $inner->node_node_data_field_device_component_title;
        $sw_version = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_version_value;
        $sw_desc = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_description_value;
        $upgrade = $inner->node_node_data_field_update_to_component_node_data_field_sw_version_field_sw_version_value;
        $row[1] = '';
        $row[2] = '';
        $row[3] = '';
        $row[4] = wordwrap($sw_title, $wordwraplength, $wordwrapchar, TRUE);
        $row[5] = wordwrap($sw_version, $wordwraplength, $wordwrapchar, TRUE);
        $row[6] = wordwrap($sw_desc, $wordwraplength, $wordwrapchar, TRUE);
        $row[7] = $upgrade;
        $rows[] = $row;   
				$invalid_configuration = TRUE;
      }
  }
  if (count($dump)>0 && count($dump1)>0) {
    foreach ($dump1 as $key => $val) {
      if (array_key_exists($key, $dump)) {
        unset($dump[$key]);
      }
    }
  }
  if (($pager_page_array[0] + 1) == $pager_total[0]) {
    if (!empty($dump)) {
      foreach ($dump as $key) {
        if (in_array($key['device_nid'], $device_component_nid)) {
          continue;
        }
        $row[1] = "";
        $row[2] = "";
        $row[3] = "";
        $row[4] = wordwrap($key['sw_title'], $wordwraplength, $wordwrapchar, TRUE);
        $row[5] = wordwrap($key['version'], $wordwraplength, $wordwrapchar, TRUE);
        $row[6] = wordwrap($key['desc'], $wordwraplength, $wordwrapchar, TRUE);
        $row[7] = $key['upgrade'];
        $rows[] = $row; 
        $device_component_nid[] = $key['device_nid'];
				$invalid_configuration = TRUE;
      }
    }
  }
	$check_configuration = checkconfiguration(array_unique($hw_array), array_unique($sw_array), $var);
	if(($check_configuration) && ($invalid_configuration)) {
			drupal_set_message('Invalid HW/SW configuration');
	}
  $output1 .= theme('table', $header, $rows, array('id' => 'hw_sw_table'));
  $output1 .= theme('pager', NULL, 10, 0, array('topic' => 'config'));
  return $output1;
}
function checkconfiguration($hw_array, $sw_array, $var) {
  $invalid_config = TRUE;
  $device_type = db_result(db_query("select devicetype.field_device_type_nid from content_type_device device join node node on node.vid = device.vid join content_field_device_type devicetype on devicetype.vid = device.vid where device.field_device_serial_number_value = '%s'", $var));
	$config_values = db_query("SELECT device_type_config.field_device_end_of_life_value as EOL,device_type_config.field_effective_date_value as EDV, node.nid AS nid, node_data_field_device_type.field_device_type_nid AS node_data_field_device_type_field_device_type_nid, node.type AS node_type, node.vid AS node_vid, node_node_data_field_device_config_hardware.nid AS node_node_data_field_device_config_hardware_nid, node_node_data_field_device_config_software.nid AS node_node_data_field_device_config_software_nid, field_device_config_sw_status.field_device_config_sw_status_value AS sw_status_value, field_device_config_hw_status.field_device_config_hw_status_value AS hw_status_value, node_node_data_field_device_config_hw_list.nid AS node_node_data_field_device_config_hw_list_nid, node_node_data_field_device_config_hw_list.vid AS node_node_data_field_device_config_hw_list_vid FROM node node JOIN content_type_device_type_config device_type_config on device_type_config.vid = node.vid LEFT JOIN content_field_device_config_hw_list node_data_field_device_config_hw_list ON node.vid = node_data_field_device_config_hw_list.vid LEFT JOIN node node_node_data_field_device_config_hw_list ON node_data_field_device_config_hw_list.field_device_config_hw_list_nid = node_node_data_field_device_config_hw_list.nid LEFT JOIN content_type_device_config_hardware field_device_config_hardware ON node_node_data_field_device_config_hw_list.vid = field_device_config_hardware.vid LEFT JOIN node node_node_data_field_device_config_hardware ON field_device_config_hardware.field_device_config_hardware_nid = node_node_data_field_device_config_hardware.nid LEFT JOIN content_field_device_config_sw_list node_config_sw_list ON node_node_data_field_device_config_hw_list.vid = node_config_sw_list.vid LEFT JOIN node node_node_data_field_device_config_sw_list ON node_config_sw_list.field_device_config_sw_list_nid = node_node_data_field_device_config_sw_list.nid LEFT JOIN content_type_device_config_software node_config_software ON node_node_data_field_device_config_sw_list.vid = node_config_software.vid LEFT JOIN node node_node_data_field_device_config_software ON node_config_software.field_device_config_software_nid = node_node_data_field_device_config_software.nid LEFT JOIN content_field_device_type node_data_field_device_type ON node.vid = node_data_field_device_type.vid LEFT JOIN content_type_device_config_software field_device_config_sw_status ON node_node_data_field_device_config_sw_list.vid = field_device_config_sw_status.vid LEFT JOIN content_type_device_config_hardware field_device_config_hw_status ON node_node_data_field_device_config_hw_list.vid = field_device_config_hw_status.vid WHERE node.type in ('device_type_config') and node_data_field_device_type.field_device_type_nid = '%s'", $device_type);
	$config = array();
	while($row = db_fetch_object($config_values)) {
	  $hw_id = $row->node_node_data_field_device_config_hardware_nid;
		$sw_id = $row->node_node_data_field_device_config_software_nid;
	  $config[$row->nid]['EDV'] = $row->EDV;
	  $config[$row->nid]['EOL'] = $row->EOL;
	  $config[$row->nid]['hw'][] = $hw_id;
	  $config[$row->nid]['status'][$hw_id] = $row->hw_status_value;
	  $config[$row->nid]['sw'][] = $sw_id;
	  $config[$row->nid]['status'][$sw_id] = $row->sw_status_value;
	}
	foreach($config as $key => $val) {
	  $eol = '';
		$edv = '';
	  $hw_list = array_unique($val['hw']);
	  $sw_list = array_unique($val['sw']);
		$currentdate = time();
		$edv = strtotime($val['EDV']);
		if (!empty($val['EOL'])) {
		  $eol = strtotime($val['EOL']);
		}
		if ($currentdate > $edv && ($eol == '' || $eol > $currentdate )) {
			if (count(array_intersect($hw_array, $hw_list)) == count($hw_array)) {
				$hw_search = array_diff($hw_list, $hw_array);
				if (!empty($hw_search)) {
					foreach ($hw_search as $hw) {
						 if ($config[$key]['status'][$hw] == 1) {
							 $invalid_config = FALSE;
						 }
					}
				}
			}
			else {
				continue;
			}
			
			if (count(array_intersect($sw_array, $sw_list)) == count($sw_array)) {
				$sw_search = array_diff($sw_list, $sw_array);
				if (!empty($sw_search)) {
					foreach ($sw_search as $sw) {
						 if ($config[$key]['status'][$hw] == 1) {
							 $invalid_config = FALSE;
						 }
					}
				}
			}
			else {
				continue;
			}
		}	
	}
	return $invalid_config;
}
/**
 * Implements hook_form_alter(). Alter list page fields
 */
function covidien_devices_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'device_information') {
    $form['device_type']['#options']['All'] = t("All");
    $form['country_nid']['#options']['All'] = t("All");
  }
  if (($form_id == "views_exposed_form") && ($form['submit']['#id']=='edit-submit-device-information')) {
    $form['submit']['#value'] = t('Go');
    $form['sno']['#autocomplete_path'] = 'covidien/devices/autocomplete';
    $form['sno']['#attributes'] = array(
      'onfocus' => 'covidien_devices_acl("devices");',
    );
    $form['customer_name']['#autocomplete_path'] = 'covidien/admin/device/customername/filter';
    $form['customer_name']['#id'] = 'customer_name';
    $form['customer_name']['#attributes'] = array('onfocus' => 'covidien_customer_device_acl("account_number","customer_name", "customername");');
    $form['account_number']['#autocomplete_path'] = 'covidien/admin/device/account/filter';
    $form['account_number']['#id'] = 'account_number';
    $form['account_number']['#attributes'] = array('onfocus' => 'covidien_customer_device_acl("customer_name", "account_number", "account");', 'onblur' => 'get_covidien_customer_name_for_device($("#account_number").val(), "customer_name", "devices");');
  }
}
/**
 * Implements hook_views_default_views(). Import all views related to module on installation
 */
function covidien_devices_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'covidien_devices') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }  
  }
  return $views;
}
/**
 * Implements hook_views_query_alter(). Alter device_history view query
 */
function covidien_devices_views_query_alter(&$view, &$query) {
if ($view->name == 'device_information') {
    global $user;
    $tmpwhere='';
    $get = filter_xss_arr($_GET);
    $sno = isset($get['sno']) ? trim($get['sno']) : '';
    $c_name = isset($get['customer_name']) ? trim($get['customer_name']) : '';
     $account_number = isset($get['account_number']) ? trim($get['account_number']) : '';
    if ($user->covidien_user!='Yes') {
      $customer_nid=implode(',', $user->customer_nid);
      $customer_nid=helper_queryin($customer_nid);
      $query->where[0]['clauses'][] = 'node_node_data_field_device_owner_1.nid IN (' . $customer_nid . ')'; 
    }
    if (!empty($c_name)) {
        $query->where[0]['clauses'][] = "node_node_data_field_device_owner_1.title = '$c_name'";
    }
    if (!empty($account_number)) {
        $query->where[0]['clauses'][] = "node_node_node_data_field_bu_customer_account_number.field_bu_customer_account_number_value = '$account_number'";
    }   
   
    $covidien_user = checkifCovidienUserQuery($user->name);
    if ($covidien_user == 'No') {
      $customer_name = getCompanyinfoQuery($user->name);
    }
  }
}

function device_upgrade_history($installation_nid, $from_component_nid, $service_id) {
  $output = theme('upgrade_history', $installation_nid, $from_component_nid, $service_id);
  return $output;
}
/**
 * Template preprocess of upgrade_history.
 */
function template_preprocess_upgrade_history(&$variables) {
  $installation_nid = $variables[0];
  $from_sw = $variables[1];
  $service_id = $variables[2];
	$hearder_info = db_fetch_object(getDeviceInfoQuery($installation_nid));
	$variables['serial_number'] = $hearder_info->serial_number;
	$variables['device_type'] = $hearder_info->device_type;
	$variables['customer_name'] = $hearder_info->customer_name;

	// Find if upgrade log has service nid populated
  $service_nid = getservicenidupgradelog($installation_nid, $from_sw, $service_id);
	if($service_nid == 0) {
		$from_component_nid = getFromcompHistory($from_sw, $hearder_info->device_nid);

		$variables['before_upgrade'] = get_upgrade_log_noserviceid($from_component_nid, 'before');
		$sw_component_nid = getSWcompNidQuery($from_sw, $installation_nid);
		$next_component_nid = getFromcompHistory($sw_component_nid, $hearder_info->device_nid);
		$is_next_component_nid = getToSWfromLogQuerynoservice($next_component_nid, $installation_nid);
		if (!empty($is_next_component_nid)) {
			$variables['after_upgrade'] = get_upgrade_log_noserviceid($next_component_nid, 'after');
			$hearder_service_info = db_fetch_object(getServicewithcompQuery($from_sw, $installation_nid));
		}
		else {
			$variables['after_upgrade'] = get_upgrade_current($variables['serial_number'], 'after');
			$hearder_service_info = db_fetch_object(getServicehistoryinfoQuery($service_id));
		} 
	}
	else {
		$variables['before_upgrade'] = get_upgrade_log($service_id, 'from', 'before');
		$is_next_component_nid = getToSWfromLogQuery($service_id, $from_sw);
		if (!empty($is_next_component_nid)) {
			$variables['after_upgrade'] = get_upgrade_log($service_id, 'to', 'after');
			$hearder_service_info = db_fetch_object(getServicewithcompQuery($from_sw, $installation_nid));
		}
		else {
			$variables['after_upgrade'] = get_upgrade_current($variables['serial_number'], 'after');
			$hearder_service_info = db_fetch_object(getServicehistoryinfoQuery($service_id));
		} 
	}
	$variables['person'] = $hearder_service_info->Person;
	$variables['date'] = date('m/d/Y H:i', strtotime($hearder_service_info->date));
}
/**
 * Function to get Past Device configuration without service nid from 
 * content_type_device_component_upgrade_log
 * with from_component_nid - SW nid, $class - set CSS class
 */
function get_upgrade_log_noserviceid($from_component_nid, $class) {
  $component = array();
  $hardware = array();
  $software = array();

  $query = getUpgradeloginfonoserviceid($from_component_nid);
  while ($row = db_fetch_object($query)) {
    $component_nid = $row->field_to_component_nid_value;
    $component_info = node_load($component_nid);
    $cvid = $row->field_to_component_nid_value;
    $component[$cvid]['name'] = $row->field_to_component_name_value;
    $component[$cvid]['partnumber'] = $row->field_to_component_partnumber_value;
    $component[$cvid]['revision'] = $row->field_to_component_version_value;
    if ($component_info->type == 'hardware') {
      $hardware[] = $row->field_to_component_nid_value;
    }
    elseif ($component_info->type == 'software') {
      $software[] = $row->field_to_component_nid_value;
      foreach ($component_info->field_hw_list as $val => $key) {
        $component[$cvid]['hw_list'][] =  $key['nid'];
      }
    }
  }
	$values = gettablestructure($hardware, $software, $component);

  $output1 .= theme('table', $values['header'], $values['rows'], array('class' => $class));
  return $output1;
}
/**
 * Function to get Past Device configuration from 
 * content_type_device_component_upgrade_log
 * with service_id, $mode = to - get after upgrade info, from - get before upgrade info, $class - set CSS class
 */
function get_upgrade_log($service_id, $mode, $class) {
  $component = array();
  $hardware = array();
  $software = array();

  $query = getUpgradeloginfo($service_id);
  while ($row = db_fetch_object($query)) {
    if(($mode == 'to') && (!empty($row->field_to_component_nid_value))) {
		  $component_nid = $row->field_to_component_nid_value;
      $cvid = $row->field_to_component_nid_value;
			$component[$cvid]['name'] = $row->field_to_component_name_value;
			$component[$cvid]['partnumber'] = $row->field_to_component_partnumber_value;
			$component[$cvid]['revision'] = $row->field_to_component_version_value;
		}
		else {
		  $component_nid = $row->field_from_component_nid_value;
      $cvid = $row->field_from_component_nid_value;
			$component[$cvid]['name'] = $row->field_from_component_name_value;
			$component[$cvid]['partnumber'] = $row->field_from_component_partnumber_value;
			$component[$cvid]['revision'] = $row->field_from_component_version_value;
		}
    $component_info = node_load($component_nid);
    if ($component_info->type == 'hardware') {
      $hardware[] = $row->field_from_component_nid_value;
    }
    elseif ($component_info->type == 'software') {
      $software[] = $component_nid;
      foreach ($component_info->field_hw_list as $val => $key) {
        $component[$cvid]['hw_list'][] =  $key['nid'];
      }
    }
  }
  $values = gettablestructure($hardware, $software, $component);

  $output1 .= theme('table', $values['header'], $values['rows'], array('class' => $class));
  return $output1;
}
/**
 * Function to get Current Device configuration
 */
function get_upgrade_current($serial_number, $class) {
  $component = array();
  $hardware = array();
  $software = array();

  $query = getCurrentConfigQuery($serial_number);
  while ($row = db_fetch_object($query)) {
    $from_component_nid = $row->field_device_component_nid;
    $to_component_nid = '';
    if (!empty($to_component_nid)) {
      $component_nid = $to_component_nid;
    } 
    else {
      $component_nid = $from_component_nid;
    }
    $component_info = node_load($component_nid);
    $cvid = $component_info->nid;
    if ($component_info->type == 'hardware') {
      $hardware[] = $component_info->nid;
      $component[$cvid]['name'] = $component_info->title;
      $component[$cvid]['partnumber'] = $component_info->field_hw_part[0]['value'];
      $component[$cvid]['revision'] = $component_info->field_hw_version[0]['value'];
    }
    elseif ($component_info->type == 'software') {
      $software[] = $component_info->nid;
      $component[$cvid]['name'] = $component_info->title;
      $component[$cvid]['partnumber'] = $component_info->field_sw_part[0]['value'];
      $component[$cvid]['revision'] = $component_info->field_sw_version[0]['value'];
      $component[$cvid]['hw_list'] = array();
      foreach ($component_info->field_hw_list as $val => $key) {
        $component[$cvid]['hw_list'][] =  $key['nid'];
      }
    }
  }
  $values = gettablestructure($hardware, $software, $component);
  $output1 .= theme('table', $values['header'], $values['rows'], array('class' => $class));
  return $output1;
}
/**
 * Function to build table structure for HW/SW configuration for above functions
 */
function gettablestructure($hardware, $software, $component) {
  $rows = array();
  $mismatch_sw = array();
  $temp = '';
  foreach ($hardware as $k) {
    $flag = 0;
    $row = array();
    $row[0] = $component[$k]['name'];
    $row[1] = $component[$k]['revision'];
    $row[2] = $component[$k]['partnumber'];
    $row[3] = '';
    $row[4] = '';
    $row[5] = '';
    foreach ($software as $s) {
      if (in_array($k, $component[$s]['hw_list'])) {
        if ($temp != $k) {
          $temp = $k;
        }
        else {
          $row[0]=''; $row[1]='';$row[2]='';
        }
        $row[3] = $component[$s]['name'];
        $row[4] = $component[$s]['revision'];
        $row[5] = $component[$s]['partnumber'];
        $rows[] = $row;
        $flag = 1;
        $mismatch_sw[] = $s;
      }
    }
    if ($flag == 0) {
      $rows[] = $row;
    } 
  }
  foreach ($software as $m) {
  if (in_array($m, $mismatch_sw)) {
    continue;
  }
    $row[0] = '';
    $row[1] = '';
    $row[2] = '';
    $row[3] = $component[$m]['name'];
    $row[4] = $component[$m]['revision'];
    $row[5] = $component[$m]['partnumber'];
    $rows[] = $row;
  }

  $header = array(
    array('data' => t('Name')),
    array('data' => t('Revision')),
    array('data' => t('Part #')),
    array('data' => t('Name')),
    array('data' => t('Version')),
    array('data' => t('Part #'))
  );
	$return = array();
	$return['rows'] = $rows;
	$return['header'] = $header;
	return $return;
}
/**
 * Autocomplete function for Company account number with selected company name in Add user, Edit user pages
 */
function get_CustomerAccountDevice($value, $string) {
  $post = filter_xss($value);
  $value = trim($post);
  $matches = array();
  global $user;
  
  
  $length = strlen($string);
  if ($length < 3) {
    echo drupal_json($matches); exit;
  }
  $string = trim($string);

  $string = str_replace("_", "\_", $string);
  $result = autoSuggestionAccountDeviceQuery($string, $value, $user->customer_nid, $user->covidien_user);
    
    while ($row = db_fetch_object($result)) {
      $matches[$row->field_bu_customer_account_number_value] = $row->field_bu_customer_account_number_value;
    }
  drupal_json($matches);
  exit;
} 
/**
 * Autocomplete function for Company account number with selected company name in Add user, Edit user pages
 */
function get_CustomerNameDevice($value, $string) {
  $post = filter_xss($value);
  $value = trim($post);
  $matches = array();
  global $user;
  $length = strlen($string);
  if ($length < 3) { 
    echo drupal_json($matches); exit; 
  }
  $string = trim($string);

  $string = str_replace("_", "\_", $string);
  $result = autoSuggestionCompanyDeviceQuery($string, $value, $user->customer_nid, $user->covidien_user);
    while ($row = db_fetch_object($result)) {
      $matches[$row->customername] = $row->customername;
    }
  drupal_json($matches);
  exit;
}
/**
 * Autocomplete function for Company account number with
 * selected company name in Add user, Edit user pages
 */
function get_CustomerNamefromAccountfordevice() {
  $post = filter_xss($_POST['value']);
  $value = trim($post);
  global $user;
  $result = ajaxCustomerNameQuery($user->covidien_user, $user->customer_nid, $value, $string);
  while ($row = db_fetch_object($result)) {
      $matches = $row->customername;
  }
  echo $matches;
  exit;
}