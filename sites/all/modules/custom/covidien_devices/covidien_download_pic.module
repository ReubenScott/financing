<?php

/**
* Implement hook_menu
*/
function covidien_download_pic_menu() {
	$items = array ();
	$items ['download_pic/list'] = array (
			'page callback' => 'covidien_download_pic',
			'access callback' => true,
			'type' => MENU_CALLBACK 
	);
	$items ['download_pic/download'] = array (
			'page callback' => 'covidien_download_pic_action',
			'access callback' => true,
			'type' => MENU_CALLBACK 
	);
	$items ['download_pic/downloadlogfile'] = array (
			'page callback' => 'covidien_download_logfile_action',
			'access callback' => true,
			'type' => MENU_CALLBACK 
	);
	return $items;
}

/**
 * Implements hook_theme()
 */
function covidien_download_pic_theme() {
	return array (
			'download_pic_list' => array (
					'template' => 'download_pic_list',
					'arguments' => array (
							'form' => NULL,
							'get' => NULL 
					) 
			),
			'download_pic_action' => array (
					'template' => 'download_pic_action',
					'arguments' => array (
							'form' => NULL,
							'get' => NULL 
					) 
			) ,
			'download_logfile_action' => array (
					'template' => 'download_logfile_action',
					'arguments' => array (
							'form' => NULL,
							'get' => NULL 
					) 
			)
	);
}
function covidien_download_pic_check_access() {
	return TRUE;
}
function covidien_download_pic() {
	drupal_set_title(t('Client Download List'));
	$output = theme ( 'download_pic_list' );
	echo $output;
	exit;
}
function covidien_download_pic_action() {
	$output = theme ( 'download_pic_action' );
	return $output;
}

function covidien_download_logfile_action() {
	$output = theme ( 'download_logfile_action' );
	return $output;
}

function covidien_theme_preprocess_download_pic_action(&$vars) {
	$filePath = $_GET ['filePath'];
	$filename = get_download_foler () . '/' . $filePath;
	
	header ( "Content-Type: application/force-download" );
	header ( "Content-Transfer-Encoding: binary" );
	// header ( 'Content-Type: application/zip' );
	header ( "Content-Disposition: attachment; filename=" . basename ( $filename ) );
	readfile ( $filename );
}


function covidien_theme_preprocess_download_logfile_action(&$vars) {
	$filePath = $_GET ['filePath'];

        $filename = str_replace(".db.gz.decode.html.gz",".db.gz",basename($filePath));	
        $filename = str_replace(".decode.html.gz",".html.gz",$filename);	

	header ( "Content-Type: application/force-download" );
	header ( "Content-Transfer-Encoding: binary" );
	// header ( 'Content-Type: application/zip' );
	header ( "Content-Disposition: attachment; filename=" . $filename );
	readfile ( $filePath );
}

function get_download_foler() {
	global $drupal_abs_path;
	global $drupal_downloadrepo;
	$download_path = $drupal_abs_path . 'sites/default/files/' . $drupal_downloadrepo;
	return $download_path;
}
function covidien_theme_preprocess_download_pic_list(&$vars) {
	global $agent_file, $base_url;
	$agent_file = $base_url . $agent_file;
	$download_path = get_download_foler ();
	if (! file_exists ( $download_path )) {
		mkdir ( $download_path, 0777 );
	}
	
	$files = get_client_files ( $download_path );
	$vars['files'] = $files;
	$vars['agent_file'] = $agent_file;
}

function get_client_files($dir) {
	$dirs = array ();
	$fso = opendir ( $dir );
	while ( $flist = readdir ( $fso ) ) {
		if ($flist != '.' && $flist != '..' && ! is_end_with ( $flist, '.png' ) && ! is_end_with ( $flist, '.name' )) {
			if (is_readable ( $dir . '/' . $flist . '.name' )) {
				$name = file_get_contents ( $dir . '/' . $flist . '.name' );
			}
			array_push ( $dirs, array (
					'file' => $flist,
					'name' => $name 
			) );
		}
	}
	sort ( $dirs );
	closedir ( $fso );
	return $dirs;
}
function is_end_with($string1, $string2) {
	if (strlen ( $string1 ) < strlen ( $string2 )) {
		return false;
	} else {
		return ! substr_compare ( $string1, $string2, strlen ( $string1 ) - strlen ( $string2 ), strlen ( $string2 ) );
	}
}
